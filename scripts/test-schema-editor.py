import requests
import json
import time

# Set the URL of the PHP script. Update this to match your server setup.
BASE_URL = "https://www.haukauntrie.de/online/api/schema-editor/"

def create_session():
    """
    Create a new editing session by sending the initial JSON schema and JSON data.
    Returns the token generated by the PHP script.
    """
    json_schema = json.dumps({
  "title": "Person",
  "type": "object",
  "required": [
    "name",
    "age",
    "date",
    "favorite_color",
    "gender",
    "location",
    "pets"
  ],
  "properties": {
    "name": {
      "type": "string",
      "description": "First and Last name",
      "minLength": 4,
      "default": "Jeremy Dorn"
    },
    "age": {
      "type": "integer",
      "default": 25,
      "minimum": 18,
      "maximum": 99
    },
    "favorite_color": {
      "type": "string",
      "format": "color",
      "title": "favorite color",
      "default": "#ffa500"
    },
    "gender": {
      "type": "string",
      "enum": [
        "male",
        "female",
        "other"
      ]
    },
    "date": {
      "type": "string",
      "format": "date",
      "options": {
        "flatpickr": {}
      }
    },
    "location": {
      "type": "object",
      "title": "Location",
      "properties": {
        "city": {
          "type": "string",
          "default": "San Francisco"
        },
        "state": {
          "type": "string",
          "default": "CA"
        },
        "citystate": {
          "type": "string",
          "description": "This is generated automatically from the previous two fields",
          "template": "{{city}}, {{state}}",
          "watch": {
            "city": "location.city",
            "state": "location.state"
          }
        }
      }
    },
    "pets": {
      "type": "array",
      "format": "table",
      "title": "Pets",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "title": "Pet",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cat",
              "dog",
              "bird",
              "reptile",
              "other"
            ],
            "default": "dog"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "default": [
        {
          "type": "dog",
          "name": "Walter"
        }
      ]
    }
  }
})
    #json_data = json.dumps({
    #    "name": "Alice",
    #    "age": 30
    #})
    json_data = json.dumps(
        {}
    )
    response = requests.post(BASE_URL, data={
        "json_schema": json_schema,
        "json_data": json_data
    })
    token = response.text.strip()
    print("Created session with token:", token)
    return token

def fetch_editor_page(token):
    """
    Fetches the HTML editor page using the token.
    """
    params = {"token": token}
    print(BASE_URL + "?token=" + token)
    response = requests.get(BASE_URL, params=params)
    print("\nEditor page fetched. (Length: {} characters)".format(len(response.text)))
    print("Page preview (first 200 characters):\n", response.text[:200])

def poll_session(token):
    """
    Polls the session endpoint to see if the editing has concluded.
    Returns the JSON response.
    """
    params = {"token": token, "poll": "1"}
    response = requests.get(BASE_URL, params=params)
    print("\nPoll response:", response.text)
    return response.text

def update_session(token):
    """
    Simulates the user updating the JSON data and saving it via a POST request.
    """
    updated_json_data = json.dumps({
        "name": "Bob",
        "age": 35
    })
    # The JSON schema remains unchanged in this example.
    json_schema = json.dumps({
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "number"}
        }
    })
    response = requests.post(BASE_URL, data={
        "token": token,
        "json_schema": json_schema,
        "json_data": updated_json_data
    })
    print("\nUpdate response from server:")
    print(response.text)

def main():
    # Step 1: Create a new session and get the token.
    token = create_session()
    time.sleep(20)  # Delay to simulate time for editing

    # Step 2: Fetch the editor page (simulating a browser load).
    fetch_editor_page(token)
    time.sleep(20)  # Delay to simulate time for editing

    # Step 3: Poll the session before update – should show editing not complete.
    while True:
        print("\nPolling before update...")
        resp = poll_session(token)
        print(str(resp))
        time.sleep(2)  # Delay to simulate time for editing

    # Step 4: Simulate a delay then update the session (as if the user clicked 'Save').
    print("\nSimulating update (user saving data)...")
    time.sleep(20)  # Delay to simulate time for editing
    update_session(token)

    # Step 5: Poll the session after update – should indicate editing is complete.
    print("\nPolling after update...")
    poll_response = poll_session(token)
    try:
        poll_json = json.loads(poll_response)
        if poll_json.get("ready"):
            print("\nEditing concluded. Updated session data:")
            print(json.dumps(poll_json, indent=4))
        else:
            print("Editing is not yet complete.")
    except Exception as e:
        print("Error parsing poll response:", e)

if __name__ == '__main__':
    main()
